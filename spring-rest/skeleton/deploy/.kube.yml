---
apiVersion: v1
kind: Namespace
metadata:
  name: ${{values.namespace}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${{values.component_name}}
  namespace: ${{values.namespace}}
spec:
  replicas: _REPLICAS_
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: ${{values.component_name}}
  template:
    metadata:
      labels:
        app: ${{values.component_name}}
    spec:
      containers:
        - name: ${{values.component_name}}
          image: _IMAGE_
          ports:
            - containerPort: 80
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: SPRING_PROFILES_ACTIVE
              value: _ENVIRONMENT_
            - name: NEW_RELIC_APP_NAME
              value: _NEW_RELIC_APP_NAME_
            #- name: DB_PASS
            #  valueFrom:
            #    secretKeyRef:
            #      name: databasecredentials
            #      key: db_pwd_users
            #- name: DB_USER_HOST
            #  valueFrom:
            #    secretKeyRef:
            #      name: database-username-host
            #      key: database-username-host-capa-b
            #- name: KAFKA_API_CLIENT
            #  valueFrom:
            #    secretKeyRef:
            #      key: kafka-api-client
            #      name: kafka-credentials
            #- name: KAFKA_API_SECRET
            #  valueFrom:
            #    secretKeyRef:
            #      key: kafka-api-secret
            #      name: kafka-credentials
            #- name: KAFKA_HOST
            #  valueFrom:
            #    secretKeyRef:
            #      key: kafka-dns
            #      name: kafka-credentials
            #- name: KAFKA_PROTOCOL
            #  valueFrom:
            #    secretKeyRef:
            #      key: kafka-security-protocol
            #      name: kafka-credentials
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 80
            initialDelaySeconds: 120
            timeoutSeconds: 5
            periodSeconds: 30
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 80
            initialDelaySeconds: 120
            timeoutSeconds: 5
            periodSeconds: 30
            failureThreshold: 3  
          imagePullPolicy: Always
      imagePullSecrets:
        - name: _SECRET_
---
apiVersion: v1
kind: Service
metadata:
  name: ${{values.component_name}}
  namespace: ${{values.namespace}}
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "_INTERNAL_BALANCER_"
spec:
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      name: http
  selector:
    app: ${{values.component_name}}
