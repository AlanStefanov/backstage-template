include:
  - project: 'tenpo/cybersecurity'
    file: '.gitlab-ci.yml'
    ref: master

stages:
  - security
  - build
  - visualize
  #TODO: Include this later
  #- coverageVerifier
  - docker
  - deploy

variables:
  IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG-$CI_PIPELINE_IID-$CI_COMMIT_SHORT_SHA
  SECRET: ${{values.component_name}}
  NAMESPACE: ${{values.namespace}}
  REPLICAS: 1
  ENVIRONMENT: dev
  NEW_RELIC_APP_NAME: ${{values.component_name}}
  NEW_RELIC_EXPECTED_STATUS_CODES: "400-451"
  COMMIT_SHA: "$CI_COMMIT_SHA"
  NR_DEPLOYMENT_VERSION: "$CI_COMMIT_SHORT_SHA"
  NR_DEPLOYMENT_DESCRIPTION: "$CI_COMMIT_TITLE"
  NR_DEPLOYMENT_REVISION: "$CI_COMMIT_SHORT_SHA"
  INTERNAL_BALANCER: "true"
  DOCKERFILE: Dockerfile
  NAME: ${{values.component_name}}
  DEPLOY_ENV_PATH: ./deploy/.kube.deployment.yml
  NAMESPACE_ENV_PATH: ./deploy/.kube.namespace.yml
  SERVICE_ENV_PATH: ./deploy/.kube.service.yml
  INGRESS_PRIVATE_HOST: $DEV_C_PRIVATE_APITENPO

build:
  coverage: '/([0-9]{1,3}.[0-9]*).%.covered/'
  stage: build
  image: openjdk:${{values.java_version}}-jdk-slim
  # DinD service is required for Testcontainers
  services:
    - name: docker:dind
      command: [ "--tls=false" ]
  variables:
    GRADLE_USER_HOME: ~/.gradle
    # Instruct Testcontainers to use the daemon of DinD, use port 2375 for non-tls connections.
    DOCKER_HOST: "tcp://docker:2375"
    # Instruct Docker not to start over TLS.
    DOCKER_TLS_CERTDIR: ""
    # Improve performance with overlayfs.
    DOCKER_DRIVER: overlay2
  before_script:
    - chmod +x gradlew
  script:
    - ./gradlew build
    - awk -F, '{ lines += $8 + $9; covered += $9 } END { print covered, "/", lines, " lines covered"; print 100*covered/lines, "% covered" }' build/reports/jacoco/test/jacocoTestReport.csv
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .gradle
      - build
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE != "schedule"

coverage:
  stage: visualize
  image: registry.gitlab.com/haynes/jacoco2cobertura:1.0.7
  script:
    - 'python /opt/cover2cover.py build/reports/jacoco/test/jacocoTestReport.xml src/main/java > build/cobertura.xml'
    - 'python /opt/source2filename.py build/cobertura.xml'
  needs: [ "build" ]
  dependencies:
    - build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - build
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/cobertura.xml
  rules:
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_PIPELINE_SOURCE != "schedule"

#TODO: include this later
#checkCoverage:
#  image: alpine:latest
#  stage: coverageVerifier
#  variables:
#    JOB_NAME: build
#    TARGET_BRANCH: uat
#  before_script:
#    - apk add --update --no-cache curl jq
#  needs: [ "build" ]
#  dependencies:
#    - build
#  script:
#    - 'TARGET_PIPELINE_ID="$(curl -s "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines?ref=${TARGET_BRANCH}&status=success&private_token=${PRIVATE_TOKEN}" | jq ".[0].id")"'
#    - 'TARGET_COVERAGE="$(curl -s "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${TARGET_PIPELINE_ID}/jobs?private_token=${PRIVATE_TOKEN}" | jq --arg build "build" ".[] | select(.name==\"build\") | .coverage")"'
#    - 'CURRENT_COVERAGE="$(curl -s "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/pipelines/${CI_PIPELINE_ID}/jobs?private_token=${PRIVATE_TOKEN}" | jq  ".[] | select(.name==\"build\") | .coverage")"'
#    - if [[ $CI_COMMIT_BRANCH == "hotfix/"* ]]; then IS_HOTFIX=0; else IS_HOTFIX=1; fi
#    - PERCENTAGE_DECREMENTED=$(echo "scale=4; (($TARGET_COVERAGE - $CURRENT_COVERAGE) /100) * 100" | bc)
#    - COVERAGE_THRESHOLD=3
#    - if [[ "$(echo "$PERCENTAGE_DECREMENTED > $COVERAGE_THRESHOLD" | bc)" -eq 1 &&  $IS_HOTFIX -eq 1 ]]; then echo "Coverage decreased from ${TARGET_COVERAGE} to ${CURRENT_COVERAGE}" && exit 1 ; fi
#  except:
#    - master
#    - tags

.before_deployment: &before_deployment
  - apk add --update curl && rm -rf /var/cache/apk/*

.after_deployment: &after_deployment
  - >
    curl -X POST "https://api.newrelic.com/graphql" -H "API-Key: $NR_API_KEY" -H "Content-Type: application/json" -d "{\"query\":\"mutation { changeTrackingCreateDeployment(deployment: { version: \\\"$NR_DEPLOYMENT_VERSION\\\", user: \\\"$GITLAB_USER_EMAIL\\\", entityGuid: \\\"$NR_ENTITY_GUID\\\", description: \\\"$NR_DEPLOYMENT_DESCRIPTION\\\", commit: \\\"$NR_DEPLOYMENT_REVISION\\\" }) { changelog commit deepLink deploymentId deploymentType description entityGuid groupId timestamp user version }}\" }"

dev_docker:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]
  variables:
    NEWRELIC_KEY: $NEWRELIC_DEV
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/docker/$DOCKERFILE --destination $IMAGE --build-arg=NEWRELIC_LICENSE_KEY=$NEWRELIC_KEY
  only:
    - dev
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - build

dev_deployment:
  stage: deploy
  image: $PIPELINE_DEV_DEPLOY_C_IMAGE
  environment:
    name: dev
  script:
    - MEMORY_REQUEST=$(grep "requests:" templates/values-$CI_ENVIRONMENT_NAME.yml -A 3 | grep "memory:" | awk '{print $2}')
    - CPU_REQUEST=$(grep "requests:" templates/values-$CI_ENVIRONMENT_NAME.yml -A 3 | grep "cpu:" | awk '{print $2}')
    - sed -i "s|_MEMORY_REQUEST_|$MEMORY_REQUEST|g" $DEPLOY_ENV_PATH
    - sed -i "s|_CPU_REQUEST_|$CPU_REQUEST|g" $DEPLOY_ENV_PATH
    - MIN_REPLICAS=$(grep "minReplicas:" templates/values-$CI_ENVIRONMENT_NAME.yml   | awk '{print $2}')
    - MAX_REPLICAS=$(grep "maxReplicas:" templates/values-$CI_ENVIRONMENT_NAME.yml   | awk '{print $2}')
    - TARGET_CPU=$(grep "targetCPUUtilizationPercentage:" templates/values-$CI_ENVIRONMENT_NAME.yml  | awk '{print $2}')
    - sed -i "s|_MIN_REPLICAS_|$MIN_REPLICAS|g" templates/hpa-*.yml
    - sed -i "s|_MAX_REPLICAS_|$MAX_REPLICAS|g" templates/hpa-*.yml
    - sed -i "s|_TARGET_CPU_|$TARGET_CPU|g" templates/hpa-*.yml
    - sed -i "s|_REPLICAS_|$REPLICAS|g" $DEPLOY_ENV_PATH
    - sed -i "s|_IMAGE_|$IMAGE|g" $DEPLOY_ENV_PATH
    - sed -i "s|_ENVIRONMENT_|$ENVIRONMENT|g" $DEPLOY_ENV_PATH
    - sed -i "s|_NEW_RELIC_APP_NAME_|$NEW_RELIC_APP_NAME|g" $DEPLOY_ENV_PATH
    - sed -i "s|_NEW_RELIC_EXPECTED_STATUS_CODES_|$NEW_RELIC_EXPECTED_STATUS_CODES|g" $DEPLOY_ENV_PATH
    - sed -i "s|_SECRET_|$SECRET|g" $DEPLOY_ENV_PATH
    - sed -i "s|_INTERNAL_BALANCER_|$INTERNAL_BALANCER|g" $SERVICE_ENV_PATH
    - sed -i "s|_INGRESS_PRIVATE_HOST_|$INGRESS_PRIVATE_HOST|g" $SERVICE_ENV_PATH
    - kubectl apply -f $NAMESPACE_ENV_PATH
    - kubectl apply --namespace=$NAMESPACE $(ls templates/hpa-*.yml | awk '{print " -f" $1}')
    - kubectl apply -f $DEPLOY_ENV_PATH
    - kubectl apply -f $SERVICE_ENV_PATH
    - >
      kubectl create secret docker-registry $SECRET \
        --namespace=$NAMESPACE \
        --dry-run=true \
        --docker-server=$CI_REGISTRY \
        --docker-username=$CI_DEPLOY_USER \
        --docker-password=$CI_DEPLOY_PASSWORD \
        --docker-email=$GITLAB_USER_EMAIL -o yaml | kubectl apply -f -
  only:
    - dev

uat_docker:
  extends: dev_docker
  variables:
    NEWRELIC_KEY: $NEWRELIC_UAT
  only:
    - uat

uat_deployment:
  extends: dev_deployment
  image: $PIPELINE_UAT_DEPLOY_C_IMAGE
  environment:
    name: uat
  variables:
    ENVIRONMENT: uat
    NR_API_KEY: $NEWRELIC_DEPLOYMENTS_UAT
    NR_ENTITY_GUID: "" #TODO: replace with value
    INGRESS_PRIVATE_HOST: $UAT_C_PRIVATE_APITENPO
  before_script:
    - *before_deployment
  after_script:
    - *after_deployment
  only:
    - uat

prod_docker:
  extends: dev_docker
  variables:
    NEWRELIC_KEY: $NEWRELIC_PROD
    IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
  only:
    - tags

prod_deployment:
  extends: dev_deployment
  image: $PIPELINE_PROD_DEPLOY_C_IMAGE
  environment:
    name: prod
  variables:
    ENVIRONMENT: prod
    IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    REPLICAS: 2
    NR_ENTITY_GUID: "" #TODO: replace with value
    INGRESS_PRIVATE_HOST: $PROD_C_PRIVATE_APITENPO
    NR_API_KEY: $NEWRELIC_DEPLOYMENTS_PROD
    NR_DEPLOYMENT_VERSION: "$CI_COMMIT_TAG"
  before_script:
    - *before_deployment
  after_script:
    - *after_deployment
  only:
    - tags